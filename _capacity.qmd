```{r cap-level2-text}
# define ranges and import data
sheet <- country

# find headings to define ranges
range <- "A3:O81"
cap_er_all <- read_range(cap_file, sheet, range) 
cap_er_all <- cap_er_all |> 
  # rename the columns where the text I need is
  rename(a = 1,
         b = 10,
         c = 11) |> 
  select(a, b, c)

# replace NAs by empty strings
cap_er_all[is.na(cap_er_all)] <- ""

cap_titles <- c("Minutes of ATFM en-route delay",
                "**Minutes of ATFM en-route delay**",
                "NSA's assessment of capacity performance", 
                "**NSA's assessment of capacity performance**", 
                "Monitoring process for capacity performance",
                "**Monitoring process for capacity performance**",
                "Capacity Planning",
                "**Capacity Planning**",
                "ATCO in OPS (FTE)",
                "**ATCO in OPS (FTE)**",
                "Application of Corrective Measures for Capacity (if applicable)",
                "**Application of Corrective Measures for Capacity (if applicable)**",
                "Summary of capacity performance",
                "**Summary of capacity performance**",
                "En route Capacity Incentive Scheme",
                "**En route Capacity Incentive Scheme**"
)

cap_heading_positions <- which(cap_er_all$a %in% cap_titles)

for (i in c(2,3,4,6,7)) {
  mytext <- apply(cap_er_all[(cap_heading_positions[i-1]+1):(cap_heading_positions[i]-1), ], 1, function(col) paste(col, collapse = "<br>"))
  
  # replace repeated breaks by single  
  mytext <- gsub("(<br>)+", "<br>", mytext)

  #remove empty elements of vector
  mytext <- mytext[mytext != "<br>"]
  
  #replace double breaks by single breaks
  pattern <- "(<br>){2,}"
  mytext <- str_replace_all(mytext, pattern, "<br>")

  ### remove leading and trailing line breaks
  mytext <- sub("^<br>|<br>$", "", mytext)
  
  ### assign text to variable
  assign(paste0("cap_er_1_", i, "_r"), paste0(mytext,collapse = ""))
  
}

# incentive scheme text --------------
  ### find observations positions
  observations_positions <- which(cap_er_all$b %in% c("Observations", "**Observations**"))
  observations_positions <- observations_positions[-1] # ignore first one
  
  ### build observations text
  mytext <- ""
  for (i in observations_positions) {
   # check if there is text for the observation
    check_observation <- if_else(cap_er_all$b[i+1] == "", FALSE, TRUE)
    
    if (check_observation) {
      mytext <- paste0(mytext,
                       if_else(cap_er_all$a[i] == "****", 
                               "",
                               paste0(cap_er_all$a[i], ": ")),
                               cap_er_all$b[i+1],
                               '<br>')
    }
  }
  
  ### add overall text at the end
  # find the last title Actual performance
  actual_perf_positions <- which(cap_er_all$a %in% c("Actual performance", "**Actual performance**"))
  actual_perf_positions <- actual_perf_positions[length(actual_perf_positions)] # we only need the last
  
  mytext_inc <- apply(cap_er_all[(actual_perf_positions+1):nrow(cap_er_all), ], 2, function(col) paste(col, collapse = "<br>"))
  
  # replace repeated breaks by single  
  mytext_inc <- gsub("(<br>)+", "<br>", mytext_inc)
  
  #remove empty elements of vector
  mytext_inc <- mytext_inc[mytext_inc != "<br>"]
  
  ### remove leading and trailing line breaks
  mytext_inc <- sub("^<br>|<br>$", "", mytext_inc)
  
  cap_er_1_8_r <- paste0(mytext, mytext_inc)

# ACC text --------------
  ### find observations positions
  observations_positions <- which(cap_er_all$c %in% c("Observations", "**Observations**"))

  ### build observations text
  mytext <- ""
  for (i in observations_positions) {
   # check if there is text for the observation
    check_observation <- if_else(cap_er_all$c[i+1] == "", FALSE, TRUE)
   # check if there is text for the acc
    check_acc <- if_else(cap_er_all$a[i+3] == "" | cap_er_all$a[i+3] == "****", 
                                 FALSE, TRUE)

    if (check_observation) {
      mytext <- paste0(mytext,
                       if_else(cap_er_all$a[i] == "****", 
                               "",
                               paste0(cap_er_all$a[i], ": ")),
                               cap_er_all$b[i+1],
                               '<br>'
                       )
    }

    if (check_acc) {
      mytext <- paste0(mytext, cap_er_all$a[i+3],'<br>')
    }    
    
  }
  
  mytext_acc <- mytext
  
  # replace repeated breaks by single  
  mytext_acc <- gsub("(<br>)+", "<br>", mytext_acc)
  
  #remove empty elements of vector
  mytext_acc <- mytext_acc[mytext_acc != "<br>"]
  
  ### remove leading and trailing line breaks
  mytext_acc <- sub("^<br>|<br>$", "", mytext_acc)
  
  cap_er_1_5_r <- paste0(mytext, mytext_acc)

## terminal ----------------------------------------------------------- 
# find headings to define ranges
if (no_tcz > 0) {
range <- "A2:U81"
cap_trm_all <- read_range(cap_trm_file, sheet, range) 
cap_trm_all <- cap_trm_all |> 
    rename(a = 1) 

# replace NAs by empty strings
cap_trm_all[is.na(cap_trm_all)] <- ""

cap_trm_titles <- c("1. Overview",
                "**1. Overview**",
                "2. Arrival ATFM Delay", 
                "**2. Arrival ATFM Delay**", 
                "3. Arrival ATFM Delay – National Target and Incentive Scheme",
                "**3. Arrival ATFM Delay – National Target and Incentive Scheme**",
                "4. ATFM Slot Adherence",
                "**4. ATFM Slot Adherence**",
                "5. ATC Pre-departure Delay",
                "**5. ATC Pre-departure Delay**",
                "6. All Causes Pre-departure Delay",
                "**6. All Causes Pre-departure Delay**",
                "7. Appendix",
                "**7. Appendix**"
)

cap_trm_heading_positions <- which(cap_trm_all$a %in% cap_trm_titles)

for (i in 1:length(cap_trm_heading_positions)) {
  if (i<length(cap_trm_heading_positions)) {
    mytext <- apply(cap_trm_all[(cap_trm_heading_positions[i]+1):(cap_trm_heading_positions[i+1]-1), ], 1, function(col) paste(col, collapse = "<br>"))
  } else{
    mytext <- apply(cap_trm_all[(cap_trm_heading_positions[i]+1):(cap_trm_heading_positions[i]+1), ], 1, function(col) paste(col, collapse = "<br>"))

  }
  # replace repeated breaks by single  
  mytext <- gsub("(<br>)+", "<br>", mytext)

  #remove empty elements of vector
  mytext <- mytext[mytext != "<br>"]
  mytext <- mytext[mytext != ""]
  
  #replace double breaks by single breaks
  pattern <- "(<br>){2,}"
  mytext <- str_replace_all(mytext, pattern, "<br>")

  ### remove leading and trailing line breaks
  mytext <- sub("^<br>|<br>$", "", mytext)
  
  ### assign text to variable
  assign(paste0("cap_trm_1_", i, "_r"), paste0(mytext,collapse = ""))
  
}
}

## enroute 
#old code based on fixed positions
# range <- "A9:O13"
# cap_er_1_2_r <- read_range(cap_file, sheet, range)  
# 
# range <- "A14:O18"
# cap_er_1_3_r <- read_range(cap_file, sheet, range)  

# range <- "A19:O23"
# cap_er_1_4_r <- read_range(cap_file, sheet, range)  

# range <- "A49:O53"
# cap_er_1_6_r <- read_range(cap_file, sheet, range)  

# # cap_er_1_5_r_acc <- ''
# cap_er_1_5_r_txt <- ''
# cap_er_1_5_r_obs <- ''
# cap_er_1_5_r <- ''
# 
# for (i in 1:acc_no) {
#   
#   # range <- paste0("A", 24 + (i-1) * 4, ":D", 25 + (i-1) * 4)
#   # cap_er_1_5_r_acc <- read_range(cap_file, sheet, range)  
#   
#   range <- paste0("K", 25 + (i-1) * 4, ":O", 27 + (i-1) * 4)
#   cap_er_1_5_r_obs <- read_range(cap_file, sheet, range)  
#   
#   range <- paste0("A", 27 + (i-1) * 4, ":O", 28 + (i-1) * 4)
#   cap_er_1_5_r_txt <- read_range(cap_file, sheet, range)  
#   
#   cap_er_1_5_r <- if_else(is.na(cap_er_1_5_r_txt[1,1]) == TRUE & is.na(cap_er_1_5_r_obs[1,1]) == TRUE, '', 
#                           paste0(cap_er_1_5_r_txt[1,1], 
#                                  if_else(is.na(cap_er_1_5_r_obs[1,1]) == TRUE, '', paste0('**Observations: **', cap_er_1_5_r_obs[1,1])),
#                                  '\n')
#                           )
#   
# }

# range <- "A54:O58"
# cap_er_1_7_r <- read_range(cap_file, sheet, range)  

## terminal
# if (no_tcz > 0) {
# range <- "A3:U4"
# cap_trm_1_1_r <- read_range(cap_trm_file, sheet, range) 
# 
# range <- "A5:U7"
# cap_trm_1_2_r <- read_range(cap_trm_file, sheet, range) 
# cap_trm_1_2 <- paste0(if_else(is.na(cap_trm_1_2_r[1,11]) == TRUE, '',
#                               pull(cap_trm_1_2_r[1,11])),
#                       if_else(is.na(cap_trm_1_2_r[2,1]) == TRUE, '',
#                               pull(cap_trm_1_2_r[2,1]))
#                       )
# 
# range <- "A8:U10"
# cap_trm_1_3_r <- read_range(cap_trm_file, sheet, range)  
# cap_trm_1_3 <- paste0(if_else(is.na(cap_trm_1_3_r[1,10]) == TRUE, "",
#                               pull(cap_trm_1_3_r[1,10])),
#                       if_else(is.na(cap_trm_1_3_r[1,11]) == TRUE, "",
#                               pull(cap_trm_1_3_r[1,11])),
#                       if_else(is.na(cap_trm_1_3_r[2,1]) == TRUE, "",
#                               paste0('<br/>', pull(cap_trm_1_3_r[2,1])))
#                       )
# 
# range <- "A11:U13"
# cap_trm_1_4_r <- read_range(cap_trm_file, sheet, range) 
# cap_trm_1_4 <- paste0(if_else(is.na(cap_trm_1_4_r[1,10]) == TRUE, "",
#                               pull(cap_trm_1_4_r[1,10])),
#                       if_else(is.na(cap_trm_1_4_r[1,11]) == TRUE, "",
#                               pull(cap_trm_1_4_r[1,11])),
#                       if_else(is.na(cap_trm_1_4_r[2,1]) == TRUE, "",
#                               pull(cap_trm_1_4_r[2,1]))
#                       )
# 
# range <- "A14:U15"
# cap_trm_1_5_r <- read_range(cap_trm_file, sheet, range)  
# 
# range <- "A16:U17"
# cap_trm_1_6_r <- read_range(cap_trm_file, sheet, range)  
# 
# range <- "A18:U19"
# cap_trm_1_7_r <- read_range(cap_trm_file, sheet, range)  
# }
```


[Capacity - {{< var doc.country >}}]{class="fakeh1"}

::: {#container-cap-prb}

## PRB assessment

```{r cap-prb}
cap_er_conc <- read_mytable("PRB_findings.xlsx", "ER_capacity", "Table_Findings_ER_capacity") %>%
  filter(Year_Report == params$year_report, State == params$country) %>%
  select(Conclusion) %>% toString() %>% paste0(., "@")

cap_er_conc1 <- cap_er_conc %>% str_replace_all(c('", ' = '\n\n', '\"' = '', '\n\n\n' = '\n\n')) %>% str_replace(fixed('c('), '') %>%  str_replace(fixed(')@'), '\n')
```

`r cap_er_conc1`

`r if (params$no_tcz == 0) ":::: {.content-hidden}"`

```{r cap-trm-prb}
cap_trm_conc <- read_mytable("PRB_findings.xlsx", "TRM_capacity", "Table_Findings_TRM_capacity") %>%
  filter(Year_Report == params$year_report, State == params$country) %>%
  select(Conclusion) %>% toString() %>% paste0(., "@")

cap_trm_conc1 <- cap_trm_conc %>% str_replace_all(c('", ' = '\n\n', '\"' = '', '\n\n\n' = '\n\n')) %>% str_replace(fixed('c('), '') %>%  str_replace(fixed(')@'), '\n')
```

`r cap_trm_conc1`

`r if (params$no_tcz == 0) "::::"`

:::

::: {#container-cap-er}
## En route performance

### En route ATFM delay (KPI#1)

:::: {layout="[ 50, 50 ]"}

::::: {#chart-cap-er}
```{r chart-cap-er, options = (cztype=c("enroute"))}
#| file: R/chart_level1_cap.R
#| out.width: "100%"
```
:::::


::::: {#chart-cap-er-month}

```{r chart-cap-er-month, options = (cztype=c("enroute"))}
#| file: R/chart_level2_cap_month.R
#| out.width: "100%"
```

:::::

::::

:::: {layout="[ 20, 60, 20 ]"}

::::: {#empty-div}
:::::

::::: {#chart-cap-delay-bin}

```{r chart-cap-delay-bin}
#| file: R/chart_level2_cap_delay_bin.R
#| out.width: "100%"
```
:::::

::::
:::

::: {.callout-note collapse=true}

#### NSA input

**Summary of capacity performance**

`r cap_er_1_7_r`

**NSA's assessment of capacity performance**

`r cap_er_1_2_r`

**Monitoring process for capacity performance**

`r cap_er_1_3_r`

**Capacity planning**

`r cap_er_1_4_r`

**Application of Corrective Measures for Capacity (if applicable)**

`r cap_er_1_6_r`

`r if (params$year_report == 2022) ":::: {.content-hidden}"`

**En route Capacity Incentive Scheme**														

`r cap_er_1_8_r`

`r if (params$year_report == 2022) "::::"`

:::

::: {#container-cap-atco}

### Other indicators

:::: {layout="[ 50, 50 ]"}

::::: {#chart-cap-atco}

```{r chart-cap-atco}
#| file: R/chart_level2_cap_atco.R
#| out.width: "100%"
```
:::::

:::::{#chart-cap-atco-acc}

```{r chart-cap-atco-acc}
#| file: R/chart_level2_cap_atco_acc.R
#| out.width: "100%"
```

:::::

::::

:::: {layout="[ 20, 60, 20 ]"}

::::: {#empty-div}
:::::

::::: {#chart-cap-sector-opening class="mychart"}

```{r chart-cap-sector-opening}
#| file: R/chart_level2_cap_sector_opening.R
#| out.width: "100%"
```

:::::
::::
:::

::: {.callout-note collapse=true}

#### NSA input

:::: {#concl-cap-atco}

`r cap_er_1_5_r`

::::

:::



`r if (params$no_tcz == 0) "::: {.content-hidden}"`

:::: {#container-cap-trm}

### Arrival ATFM delay (KPI#2)

::::: {layout="[ 50, 50 ]"}

:::::: {#chart-cap-trm}
```{r chart-cap-trm, options = (cztype=c("terminal"))}
#| file: R/chart_level1_cap.R
#| out.width: "100%"
```
::::::

:::::: {#chart-cap-trm-month}
```{r chart-cap-trm-month, options = (cztype=c("terminal"))}
#| file: R/chart_level2_cap_month.R
#| out.width: "100%"
```
::::::
:::::

::::

:::: {.callout-note collapse=true}

#### NSA input

::::: {#concl-cap-trm}

`r if (exists("cap_trm_1_1_r") == FALSE) {''} else {cap_trm_1_1_r}`

`r if (exists("cap_trm_1_2_r") == FALSE) {''} else {cap_trm_1_2_r}`

`r if (exists("cap_trm_1_3_r") == FALSE) {''} else {cap_trm_1_3_r}`

:::::

::::


:::: {#container-cap-other}

### Other performance indicators (PI#1-3)

::::: {layout="[ 20, 60, 20 ]"}

:::::: {#empty-div}
::::::

:::::: {#chart-cap-all-causes-delay}

```{r chart-cap-all-causes-delay}
#| file: R/chart_level2_cap_all_causes_delay.R
#| out.width: "100%"
```
::::::
:::::

::::

:::: {.callout-note collapse=true}

#### NSA input

::::: {#concl-cap-cap-all-causes-delay}
**All causes pre departure delay**

`r if (exists("cap_trm_1_6_r") == FALSE) {''} else {cap_trm_1_6_r}`

:::::
::::

:::: {#container-cap-table-apt-pis}
```{r table-cap-apt-pis}
#| file: R/table_level2_cap_apt_pis.R
#| out.width: "100%"
```
::::

:::: {.callout-note collapse=true}

#### NSA input
::::: {#concl-cap-apt-pis}

**ATFM slot adherence**

`r if (exists("cap_trm_1_4_r") == FALSE) {''} else {cap_trm_1_4_r}`


**ATC pre-departure delay**

`r if (exists("cap_trm_1_5_r") == FALSE) {''} else {cap_trm_1_5_r}`

:::::


::::

`r if (params$no_tcz == 0) ":::"`
