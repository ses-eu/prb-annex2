```{r cap-level2-text}
if (country == "SES RP3" | country == "MUAC") {
  #we need to define this variables to avoid errors
  cap_er_nsa_2 <- ''
  cap_er_nsa_3 <- ''
  cap_er_nsa_4 <- ''
  cap_er_nsa_5 <- ''
  cap_er_nsa_6 <- ''
  cap_er_nsa_7 <- ''
  cap_er_nsa_8 <- ''
  cap_er_nsa_incentive  <- '' 
  
  cap_trm_nsa_1 <- ''
  cap_trm_nsa_2 <- ''
  cap_trm_nsa_3 <- ''
  cap_trm_nsa_4 <- ''
  cap_trm_nsa_5 <- ''
  cap_trm_nsa_6 <- ''
  
  cap_heading_ukraine <- 0
} else {
  
  # define ranges and import data
  sheet <- country
  # sheet <- "Czech Republic"
  
  # find headings to define ranges
  range <- "A3:O81"
  cap_er_all <- read_range(cap_file, sheet, range) 
  cap_er_all <- cap_er_all |> 
    # rename the columns where the text I need is
    rename(a = 1,
           b = 10,
           c = 11) |> 
    select(a, b, c)
  
  # replace NAs by empty strings
  cap_er_all[is.na(cap_er_all)] <- ""
  
  cap_titles <- c("Minutes of ATFM en-route delay",
                  "**Minutes of ATFM en-route delay**",
                  "NSA's assessment of capacity performance", 
                  "**NSA's assessment of capacity performance**", 
                  "Monitoring process for capacity performance",
                  "**Monitoring process for capacity performance**",
                  "Capacity Planning",
                  "**Capacity Planning**",
                  "ATCO in OPS (FTE)",
                  "**ATCO in OPS (FTE)**",
                  "Additional information relating to Russia's war of agression against Ukraine",
                  "**Additional information relating to Russia's war of agression against Ukraine**",
                  "Additional Information Related to Russia's War of Aggression Against Ukraine",
                  "**Additional Information Related to Russia's War of Aggression Against Ukraine**",
                  "Application of Corrective Measures for Capacity (if applicable)",
                  "**Application of Corrective Measures for Capacity (if applicable)**",
                  "Summary of capacity performance",
                  "**Summary of capacity performance**",
                  "En route Capacity Incentive Scheme",
                  "**En route Capacity Incentive Scheme**"
  )
  
  cap_heading_positions <- which(cap_er_all$a %in% cap_titles)
  cap_heading_ukraine <- which(cap_er_all$a %in% c("Additional information relating to Russia's war of agression against Ukraine", 
                                                   "**Additional information relating to Russia's war of agression against Ukraine**", 
                                                   "Additional Information Related to Russia's War of Aggression Against Ukraine",
                                                   "**Additional Information Related to Russia's War of Aggression Against Ukraine**"
  ))
  
  for (i in 2:length(cap_heading_positions)) {
    mytext <- apply(cap_er_all[(cap_heading_positions[i-1]+1):(cap_heading_positions[i]-1), ], 1, function(col) paste(col, collapse = "<br>"))
    
    # replace repeated breaks by single  
    mytext <- gsub("(<br>)+", "<br>", mytext)
  
    #remove empty elements of vector
    mytext <- mytext[mytext != "<br>"]
    
    #replace double breaks by single breaks
    pattern <- "(<br>){2,}"
    mytext <- str_replace_all(mytext, pattern, "<br>")
  
    ### remove leading and trailing line breaks
    mytext <- sub("^<br>|<br>$", "", mytext)
    
    ### assign text to variable
    assign(paste0("cap_er_nsa_", i), paste0(mytext,collapse = ""))
    
  }
  
  if (length(cap_heading_positions) == 7) {cap_er_nsa_8 = ""}
  
  # cap_er_nsa_9
  
  # incentive scheme text --------------
    ### find observations positions
    observations_positions <- which(cap_er_all$b %in% c("Observations", "**Observations**"))
    observations_positions <- observations_positions[-1] # ignore first one
    
    ### build observations text
    mytext <- ""
    for (i in observations_positions) {
     # check if there is text for the observation
      check_observation <- if_else(cap_er_all$b[i+1] == "", FALSE, TRUE)
      
      if (check_observation) {
        mytext <- paste0(mytext,
                         if_else(cap_er_all$a[i] == "****", 
                                 "",
                                 paste0(cap_er_all$a[i], ": ")),
                                 cap_er_all$b[i+1],
                                 '<br>')
      }
    }
    
    ### add overall text at the end
    # find the last title Actual performance
    actual_perf_positions <- which(cap_er_all$a %in% c("Actual performance", "**Actual performance**"))
    actual_perf_positions <- actual_perf_positions[length(actual_perf_positions)] # we only need the last
    
    mytext_inc <- apply(cap_er_all[(actual_perf_positions+1):nrow(cap_er_all), ], 2, function(col) paste(col, collapse = "<br>"))
    
    # replace repeated breaks by single  
    mytext_inc <- gsub("(<br>)+", "<br>", mytext_inc)
    
    #remove empty elements of vector
    mytext_inc <- mytext_inc[mytext_inc != "<br>"]
    
    ### remove leading and trailing line breaks
    mytext_inc <- sub("^<br>|<br>$", "", mytext_inc)
    
    cap_er_nsa_incentive <- paste0(mytext, mytext_inc)
  
  # ACC text --------------
    ### find observations positions
    observations_positions <- which(cap_er_all$c %in% c("Observations", "**Observations**"))
  
    ### build observations text
    mytext <- ""
    for (i in observations_positions) {
     # check if there is text for the observation
      check_observation <- if_else(cap_er_all$c[i+1] == "", FALSE, TRUE)
     # check if there is text for the acc
      check_acc <- if_else(cap_er_all$a[i+3] == "" | cap_er_all$a[i+3] == "****", 
                                   FALSE, TRUE)
  
      if (check_observation) {
        mytext <- paste0(mytext,
                         if_else(cap_er_all$a[i] == "****", 
                                 "",
                                 paste0(cap_er_all$a[i], ": ")),
                                 cap_er_all$c[i+1],
                                 '<br>'
                         )
      }
  
      if (check_acc) {
        mytext <- paste0(mytext, cap_er_all$a[i+3],'<br>')
      }    
      
    }
    
    mytext_acc <- mytext
    
    # replace repeated breaks by single  
    mytext_acc <- gsub("(<br>)+", "<br>", mytext_acc)
    
    #remove empty elements of vector
    mytext_acc <- mytext_acc[mytext_acc != "<br>"]
    
    ### remove leading and trailing line breaks
    mytext_acc <- sub("^<br>|<br>$", "", mytext_acc)
    
    cap_er_nsa_5 <- paste0(mytext_acc)
  
  ## terminal ----------------------------------------------------------- 
  # find headings to define ranges
  if (no_tcz > 0) {
  range <- "A2:U81"
  cap_trm_all <- read_range(cap_trm_file, sheet, range) 
  cap_trm_all <- cap_trm_all |> 
      rename(a = 1) 
  
  # replace NAs by empty strings
  cap_trm_all[is.na(cap_trm_all)] <- ""
  
  cap_trm_titles <- c("1. Overview",
                  "**1. Overview**",
                  "2. Arrival ATFM Delay", 
                  "**2. Arrival ATFM Delay**", 
                  "3. Arrival ATFM Delay – National Target and Incentive Scheme",
                  "**3. Arrival ATFM Delay – National Target and Incentive Scheme**",
                  "4. ATFM Slot Adherence",
                  "**4. ATFM Slot Adherence**",
                  "5. ATC Pre-departure Delay",
                  "**5. ATC Pre-departure Delay**",
                  "6. All Causes Pre-departure Delay",
                  "**6. All Causes Pre-departure Delay**",
                  "7. Appendix",
                  "**7. Appendix**"
  )
  
  cap_trm_heading_positions <- which(cap_trm_all$a %in% cap_trm_titles)
  
  for (i in 1:length(cap_trm_heading_positions)) {
    if (i<length(cap_trm_heading_positions)) {
      mytext <- apply(cap_trm_all[(cap_trm_heading_positions[i]+1):(cap_trm_heading_positions[i+1]-1), ], 1, function(col) paste(col, collapse = "<br>"))
      } else{
      mytext <- apply(cap_trm_all[(cap_trm_heading_positions[i]+1):(cap_trm_heading_positions[i]+1), ], 1, function(col) paste(col, collapse = "<br>"))
      }
    
    # replace repeated breaks by single  
    mytext <- gsub("(<br>)+", "<br>", mytext)
  
    #remove empty elements of vector
    mytext <- mytext[mytext != "<br>"]
    mytext <- mytext[mytext != ""]
    
    #replace double breaks by single breaks
    pattern <- "(<br>){2,}"
    mytext <- str_replace_all(mytext, pattern, "<br>")
  
    ### remove leading and trailing line breaks
    mytext <- sub("^<br>|<br>$", "", mytext)
    
    ### assign text to variable
    assign(paste0("cap_trm_nsa_", i), paste0(mytext,collapse = ""))
    }
  }

}
```


[Capacity - {{< var doc.country >}}]{class="fakeh1"}

::: {#container-cap-prb}

## PRB monitoring

```{r cap-prb}
if (params$country == "Luxembourg") {
  cap_er_conc1 <- ""
  } else {
  cap_er_conc1 <- get_prb_conclusions("PRB_findings.xlsx", "ER_capacity", "Table_Findings_ER_capacity")
}
```

`r cap_er_conc1`

`r if (params$no_tcz == 0 | params$year_report != 2023) ":::: {.content-hidden}"`

```{r cap-trm-prb}
cap_trm_conc1 <- get_prb_conclusions("PRB_findings.xlsx", "TRM_capacity", "Table_Findings_TRM_capacity")
```

`r cap_trm_conc1`

`r if (params$no_tcz == 0 | params$year_report != 2023) "::::"`

:::


`r if (params$country == "Luxembourg") "::: {.content-hidden}"`
::: {#container-cap-er}
## En route performance

### En route ATFM delay (KPI#1)

:::: {layout="[ 50, 50 ]"}
::::: {#chart-cap-er}
```{r chart-cap-er, options = (cztype=c("enroute"))}
#| file: R/chart_level1_cap.R
#| out.width: "100%"
```
:::::

::::: {#chart-cap-er-month}
```{r chart-cap-er-month, options = (cztype=c("enroute"))}
#| file: R/chart_level2_cap_month.R
#| out.width: "100%"
```
:::::
::::

`r if (country == "MUAC") ":::: {.content-hidden}"`
:::: {layout="[ 20, 60, 20 ]"}

::::: {#empty-div}
:::::

::::: {#chart-cap-delay-bin}

```{r chart-cap-delay-bin}
#| file: R/chart_level2_cap_delay_bin.R
#| out.width: "100%"
```
:::::

::::
`r if (country == "MUAC") "::::"`

:::


`r if (params$country == "SES RP3" | params$country == "MUAC") "::: {.content-hidden}"`
::: {.callout-note collapse=true}

#### Focus on en route ATFM delay

**Summary of capacity performance**

`r if_else(length(cap_heading_ukraine) == 0, cap_er_nsa_7, cap_er_nsa_8)`

**NSA's assessment of capacity performance**

`r cap_er_nsa_2`

**Monitoring process for capacity performance**

`r cap_er_nsa_3`

**Capacity planning**

`r cap_er_nsa_4`

**Application of Corrective Measures for Capacity (if applicable)**

`r cap_er_nsa_6`

`r if_else(length(cap_heading_ukraine) == 0, "", paste0("**Additional Information Related to Russia's War of Aggression Against Ukraine**<br><br>", cap_er_nsa_7))`

`r if (params$year_report <= 2022) ":::: {.content-hidden}"`

**En route Capacity Incentive Scheme**														

`r cap_er_nsa_incentive`

`r if (params$year_report <= 2022) "::::"`

:::
`r if (params$country == "SES RP3" | params$country == "MUAC") ":::"`


`r if (params$country != "SES RP3") "::: {.content-hidden}"`
### Summary of performance at local level

:::: {layout="[ 20, 60, 20 ]"}

::::: {#empty-div}
:::::

::::: {#table-erdelay-summary}
```{r table-erdelay-summary}
#| file: R/table_cap_erdelay_all_states.R
#| out.width: "100%"
```
:::::

::::: {#empty-div}
:::::

::::

`r if (params$country != "SES RP3") ":::"`


::: {#container-cap-atco}

### Other indicators

:::: {layout="[ 50, 50 ]"}

::::: {#chart-cap-atco}
```{r chart-cap-atco}
#| file: R/chart_level2_cap_atco.R
#| out.width: "100%"
```
:::::

::::: {#chart-cap-2}
<!-- for ses there is no graphic per acc -->
`r if (params$country == "SES RP3") ":::::: {.content-hidden}"`
```{r chart-cap-atco-acc}
#| file: R/chart_level2_cap_atco_acc.R
#| out.width: "100%"
```
`r if (params$country == "SES RP3") "::::::"`

<!-- so we replace it by thee sector opening hours -->
`r if (params$country != "SES RP3") ":::::: {.content-hidden}"`
```{r chart-cap-sector-opening-ses}
#| file: R/chart_level2_cap_sector_opening.R
#| out.width: "100%"
```
`r if (params$country != "SES RP3") "::::::"`
:::::

::::

<!-- for ses this chart is now above, so we hide it here -->
`r if (params$country == "SES RP3") ":::: {.content-hidden}"`

:::: {layout="[ 20, 60, 20 ]"}

::::: {#empty-div}
:::::

::::: {#chart-cap-sector-opening class="mychart"}

```{r chart-cap-sector-opening}
#| file: R/chart_level2_cap_sector_opening.R
#| out.width: "100%"
```

:::::
::::
`r if (params$country == "SES RP3") "::::"`

:::

`r if (params$country == "SES RP3" | params$country == "MUAC") "::: {.content-hidden}"`
::: {.callout-note collapse=true}

#### Focus on ATCOs in operations

:::: {#concl-cap-atco}

`r cap_er_nsa_5`

::::
:::
`r if (params$country == "SES RP3" | params$country == "MUAC") ":::"`
`r if (params$country == "Luxembourg") ":::"`


`r if (params$no_tcz == 0) "::: {.content-hidden}"`

:::: {#container-cap-trm}
## Terminal performance

### Arrival ATFM delay (KPI#2)

::::: {layout="[ 50, 50 ]"}

:::::: {#chart-cap-trm}
```{r chart-cap-trm, options = (cztype=c("terminal"))}
#| file: R/chart_level1_cap.R
#| out.width: "100%"
```
::::::

:::::: {#chart-cap-trm-month}
```{r chart-cap-trm-month, options = (cztype=c("terminal"))}
#| file: R/chart_level2_cap_month.R
#| out.width: "100%"
```
::::::
:::::

::::


`r if (params$country != "SES RP3") ":::: {.content-hidden}"`
### Summary of performance at local level

:::: {layout="[ 20, 60, 20 ]"}

::::: {#empty-div}
:::::

::::: {#table-arrdelay-summary}
```{r table-arrdelay-summary}
#| file: R/table_cap_arrdelay_all_states.R
#| out.width: "100%"
```
:::::

::::: {#empty-div}
:::::

::::

`r if (params$country != "SES RP3") "::::"`


`r if (params$country == "SES RP3") ":::: {.content-hidden}"`
:::: {.callout-note collapse=true}

#### Focus on arrival ATFM delay

::::: {#concl-cap-trm}

`r if (exists("cap_trm_nsa_1") == FALSE) {''} else {cap_trm_nsa_1}`

`r if (exists("cap_trm_nsa_2") == FALSE) {''} else {cap_trm_nsa_2}`

`r if (exists("cap_trm_nsa_3") == FALSE) {''} else {cap_trm_nsa_3}`

:::::
::::


:::: {#container-cap-other}

### Other terminal performance indicators (PI#1-3)

::::: {layout="[ 20, 60, 20 ]"}

:::::: {#empty-div}
::::::

:::::: {#chart-cap-all-causes-delay}

```{r chart-cap-all-causes-delay}
#| file: R/chart_level2_cap_all_causes_delay.R
#| out.width: "100%"
```
::::::
:::::

::::

:::: {#container-cap-table-apt-pis}
```{r table-cap-apt-pis}
#| file: R/table_level2_cap_apt_pis.R
#| out.width: "100%"
```
::::

:::: {.callout-note collapse=true}

#### Focus on performance indicators at airport level
::::: {#concl-cap-apt-pis}

**ATFM slot adherence**

`r if (exists("cap_trm_nsa_4") == FALSE) {''} else {cap_trm_nsa_4}`


**ATC pre-departure delay**

`r if (exists("cap_trm_nsa_5") == FALSE) {''} else {cap_trm_nsa_5}`

**All causes pre-departure delay**

`r if (exists("cap_trm_nsa_6") == FALSE) {''} else {cap_trm_nsa_6}`

:::::
::::
`r if (params$country == "SES RP3") "::::"`

`r if (params$no_tcz == 0) ":::"`


<!-- we need this graph for ses -->
`r if (params$country != "SES RP3") "::: {.content-hidden}"`

:::: {#container-cap-other-ses}
### Other performance indicators 

::::: {layout="[ 20, 60, 20 ]"}

:::::: {#empty-div}
::::::

:::::: {#chart-cap-all-causes-delay-ses}

```{r chart-cap-all-causes-delay-ses}
#| file: R/chart_level2_cap_all_causes_delay.R
#| out.width: "100%"
```
::::::
:::::

::::
`r if (params$country != "SES RP3") ":::"`
